1. 배열의 기초개념
배열은 연속적인 메모리 상에 동일한 데이터 타입의 요소들을 순차적(일렬)으로 저장하는 자료구조이다.
하나의 배열은 고정된 크기를 가지며, 배열 인덱스를 사용할 경우 각 배열의 요소를 즉시 접근할 수 있다.

2. 가변 배열(Jagged Array)
C#에서 일반 다차원 배열의 경우 [,]와 같이 콤마로 차원을 분리하는 반면, 가변 배열은 [][]와 같이 표현한다.
가변 배열은 일반 다차원 배열로 했을때 공간의 낭비가 심해지는 경우, 혹은 각 차원마다 다른 배열 크기를 가져야 하는 경우 유용하다.

int[][] T = new int[3][];

3. 동적 배열(Dynamic Array)
배열은 일정한 크기의 연속된 요소들의 집합이고, 배열의 크기는 초기화시 미리 지정된다.
정적 배열은 이렇게 처음 지정한 고정 크기를 계속 유지하는 배열이다.

하지만 배열의 최대 크기를 미리 알 수 없는 경우도 있으며, 필요시 배열을 확장해야 하는 경우도 있다.

동적 배열을 만드는가장 간단한 방식은 새로운 요소가 추가될 때마다 배열 크기를 하나씩 늘려가는 것이다.
매번 새로운 배열 공간을 생성하고 기존 배열 요소들을 복사해 넣어야 한다는 큰 단점이 있다.
이러한 방식은 배열에 하나의 요소를 추가할 때 마다 전체 기존 배열을 복사해야 하기 때문에, 배열의 크기가 n일 때 O(n)의 시간이 소요된다.

위와 같은 단점을 해결하기 위해 흔히 사용하는 방법은 동적 배열을 2배씩 확장하는 것이다.

4. 원형 배열
원형 배열은 고정된 크기의 배열을 마치 양 끝이 연결된 것처럼 사용할 수 있게 한 자료구조다.
배열의 크기가 N일 때, 배열의 마지막 요소(N - 1)에 도착하면, 다음 배열오소는 첫번째 요소(0)로 순환하는 구조이다.

원형 배열은 처음 들어간 데이터가 먼저 나오는 FIFO(First In First Out)구조의 데이터 버퍼에 적합하며, 
비원형의 일반 배열은 마지막에 들어간 데이터가 먼저 나오는 LIFO(Last In First Out)구조의 버퍼에 적합하다.
원형 배열은 FIFO 구조를 가진 큐(Queue)를 구현하거나 데이터 스트림 버퍼 등을 구현할 때 사용된다.

원형 배열에서 핵심은 %(mod) 연산자를 사용하여 인덱스를 순환한다.
ex) 10 % 8 = 2
앞 피연산자의 수가 아무리 커져도 mode 연산자(%) 뒤의 피연산자 미만의 값이 나온다.
