트리(Tree)는 데이터가 선형적으로 나열되어 있지 않고 노드들이 가지처럼 연결되어 있는 비선형적 자료구조를 갖고 있다.
트리는 계층적 구조를 가지는 사이클이 없는 그래프의 일종이다.

루트(Root) : 트리의 가장 꼭대기에 있는 노드
간선(Edge) : 두 노드를 잇는 링크
자식(Child) : 부모 노드 밑의 자식 노드
부모(Parent) : 자식 노드 위에 연결된 부모 노드
형제(Sibling) : 부모가 같은 자식 노드들
단말(Leaf) : 트리에서 자식노드를 갖지 안흔 하단의 노드
높이(Height) : 특정 노드에서 루트 사이의 길이 (윗쪽 방향으로 계산)
깊이(Depth) : 루트 노드에서 특정 노드까지의 길이 (아래쪽 방향으로 계산)
트리 깊이(Tree Depth) : 루트 노드에서 가장 먼 Leaf 노드까지의 길이
레벨(Level) : 루트 노드로부터의 수평적 깊이 (루트노드 레벨 = 1)
노드의 차수(Node Degree) : 한 노드의 서브트리의 갯수. 자식 노드의 수와 동일.
트리의 차수(Tree Degree) : 트리 안 노드들의 차수 중 최대 치수

--------------------------------------------------------------

트리는 여러 방식으로 표현될 수 있는데 가장 일반적인 N-링크 표현법과 왼쪽 자식 - 오른쪽 형제노드 표현법이 있다.

N-링크 표현법

N-링크 표현법은 트리구조를 가장 직관적으로 표현항 방식으로, 각노드에 최대 차수 N개 만큼의 링크를 두어 트리를 표현하는 방식이다.

트리 자료구조에서 임의의 한 노드는 트리의 차수(Tree Degree)만큼의 링크(Edge)를 가질 수 있다.

N-링크 표현법은 트리 구조가 직관적잉기 때문에 사용하기 쉽다는 장점이 있지만, 
많은 노드가 최대 차수만큼 자식 노드들을 가지고 있는 것이 아니기 때문에 공간의 낭비가 심하다는 단점이있다.
공간의 낭비를 어느정도 해결하기 위해 동적 배열을 사용할 수 있다.

--------------------------------------------------------------

왼쪽자식-오른쪽 형제노드 표현법

왼쪽자식-오른쪽 형제노드(Left Child Right Sibling Expression, LCRS)은 모든 노드에 링크르 2개씩 두고,
첫번째 링크는 자식노드를 가리키고, 두번째 링크는 자신의 오른쪽 형제노드를 가리키도록 표현한 방식이다.
노드의 링크가 2개로 고정되어 있기 때문에 N-링크 표현법보다 링크 관리가 간단한 편이다.

트리를 LCRS로 표현하면, 데이터가 계속 늘어날 때에도 2개의 링크로 효과적인 트리를 만들고 관리할 수 있다는 장점이 있다.
부모가 가진 모든 자식들을 알아내기 위해서 부모의 왼쪽 자식노드를 거쳐 계속 오른쪽 형제노드를 찾아간다.

