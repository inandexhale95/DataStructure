Heap은 힙 속성을 만족하는 트리 기반의 자료구조이다.
힙 속성에 따르면 부모 노드와 자식 노드 간의 순서(대소관계)는 일정해야 하고, 형제 노드들 간의 순서는 상관이 없다.
부모 노드가 자식 노드보다 항상 크거나 같은 경우를 최대 힙이라 하고, 부모 노드가 자식 노드보다 항상 작거나 같은 경우를 최소 힙이라 한다.

기본적으로 Heap은 최소값 혹은 최대값을 빠르게 가져오기 위해 고안된 자료구조이다.
최소값을 가져오는 최소 힙 트리에서 부모 노드는 항상 자식 노드보다 작거나 같지만, 형제 노드 사이에서는 아무런 대소 관계가 정해져 있지 않다.
따라서, Heap은 완전히 정렬된 자료구조가 아니며, 부모 자식 간에만 부분적으로 정렬된 자료구조라 할 수 있다.

최소 힙의 루트에는 항상 최소값이 있고, 최대 힙의 루트에는 항상 최대 값이 있게 되는데, 이러한 성질을 이용해 Heap은 우선순위 큐를 구현하는데 사용된다.

------------------------------
Heap의 Add 메서드

Heap을 구현할 때 배열을 사용하는 큰 장점 중의 하나는 새 요소를 배열의 마지막에 바로 추가할 수 있다는 점이다.
즉, 연결 리스트를 사용하는 이진 트리는 새 요소를 추가하는 마지막 위치를 검색해야 하는 반면, 배열을 사용하는 완전 이진 트리는 마지막 위치에 추가할 수 있어 O(1)의 시간 복잡성을 갖는다.

Heap에 새로운 요소가 추가되거나 제거되면 힙 속성이 유지되지 않을 수 있으므로 요소를 위아래로 옮겨 힙 속성을 유지하도록 해야 한다.
힙 속성을 유지하는 이동은 부모/자식 가느이 직계에서만 일어나므로 O(log N)의 시간 복잡성을 갖는다.

새 요소를 배열 마지막에 추가한다. 추가한 요소가 현재 노드가 된다.
현재 노드가 루트에 도달할 때까지 루프를 돈다.
	- 현재 노드가 부모 노드보다 크면 둘을 서로 교체한다. 부모 노드를 현재 노드로 놓고 반복한다.
	- 현재 노드가 부모 노드보다 작거나 같으면 루프를 빠져나온다.