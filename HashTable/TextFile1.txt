해시테이블은 Hash Map이라고도 불리우는데, 키(Key)와 값(Value)을 매핑하는 기능을 구현한 자료구조이다.
해시테이블에서 Key와 Value를 갖는 장소를 버켓(Bucket) 혹은 슬롯(Slot)이라 한다.

해시테이블은 삽입, 삭제, 검색 수행에 있어 평균적으로 O(1)의 시간 복잡성을 가지며, 일반적으로 다른 자료구조에 비해 빠른 성능을 가진다.


-----------------------------
해시 충돌 (Hash Collision)
해싱에서 복수 개의 Key와 동일한 Bucket 주소를 가리킬 때 해시 충돌이 발생한다.
이러한 해시 충돌을 해결하기 위해 일반적으로 크게 체이닝(Chaining)방식과 개방 주소법(Open Address) 방식을 사용하여 이러한 해시 충동 문제를 처리한다.

Chaining 방식
Bucket 안에 하나의 엔트리만 저장하는 것이 아니라 일종의 리스트를 사용하여 하나의 Bucket 인덱스에 여러 개의 엔트리가 연결되어 들어가도록 하는 방법이다.
즉, 동일한 Bucket 주소에 복수 개의 엔트리 노드가 체인처럼 연결되는 구조로서 이를 Separate Chaining 방식이라 한다.

Separate Chaining 방식에서 가장 일반적인 구조는 Bucket에 연결리스트 노드를 체인처럼 계속해서 연결해 나가는 방식이다.
즉, 특정 인덱스의 Bucket은 첫 연결리스트 노드를 가리키고, 이 노드가 다음 노드를 연결하는 방식을 취한다.
Bucket의 연결리스트에 새로운 엔트리를 추가하는 방식으로는 맨 마지막에 추가하는 것보다 Bucket 링크의 맨 앞에 삽입하는 방법이 더 효율적이다.


Open Addressing 방식
개방 주소법 방식은 Key에 상응하는 Bucket이 이미 차 있을 때, Bucket 배열을 일정한 간격으로 이동하면서 이용 가능한 다음 Bucket 위치를 찾아 사용하는 방법이다.
Chaining 방식에서는 한 Bucket에 여러 엔트리가 들어갈 수 있지만, OpenAddressing 방식에서는 한 Bucket당 하나의 엔트리만 들어갈 수 있다.